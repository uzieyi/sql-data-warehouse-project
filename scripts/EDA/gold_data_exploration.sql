/*

## You can find the {complete data exploration project here](https://github.com/uzieyi/sql-exploratory-data-analytics-project.git)


===========================================================================
This script is for Exploratory Data Analysis (EDA) on the Gold layer
===========================================================================
    Script Purpose: This script explores the data on the gold layer tables to
    uncover insight about the business as presented in the dataset, which has now
    been transformed and loaded into the data warehouse 

    it covers
    	Database Exploration 
    	Dimensions Exploration 
    	Date Exploration 
    	Measures Exploration (Big Number)
    	Magnitude
    	Ranking (Top N - Bottom N)
============================================================================
*/



--===Database Exploration ===

SELECT * 
FROM gold.dim_customers

SELECT *
FROM gold.dim_products

SELECT * 
FROM gold.fact_sales

--- Explore All Objects in the Database
SELECT * FROM INFORMATION_SCHEMA.TABLES


-- Explore All Columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'




--==Dimensions Exploration ==

-- Explore All the Countries Our customers come from
SELECT DISTINCT Country FROM gold.dim_customers

-- Explore ALL the Product categories 'The major divisions'
SELECT DISTINCT category FROM gold.dim_products

-- Explore ALL the Product sub-categories 
SELECT DISTINCT category, sub_category FROM gold.dim_products

-- Explore ALL the Product categories, sub-categories and product names 
SELECT DISTINCT category, sub_category, product_name FROM gold.dim_products
ORDER BY 1, 2, 3


--== Date Ecploration ==


-- Find the date of the first and last order 
-- How many Years of sales are available 

SELECT 
MIN(order_date) AS first_order_date, 
MAX(order_date) AS last_order_date, 
DATEDIFF(year, MIN(order_date), MAX(order_date)) AS order_range_in_years,
DATEDIFF(month, MIN(order_date), MAX(order_date)) AS order_range_in_months
FROM gold.fact_sales


--- Find the youngest and the oldest customer
SELECT 
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age, 
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(year, MAX(birthdate), GETDATE())  AS youngest_age
FROM gold.dim_customers



--== Measures Exploration (Big Number) ==

-- Find the Total Sales
SELECT SUM(sales) AS total_sales FROM gold.fact_sales

-- Find how many items are sold 
SELECT SUM(quantity) AS total_quantity
FROM gold.fact_sales

-- Find the average selling price 
SELECT AVG(sales) AS average_selling_price
FROM gold.fact_sales

-- Find the total number of orders
SELECT COUNT(order_number) AS total_orders
FROM gold.fact_sales

SELECT COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales

-- Find the total number of products
SELECT COUNT(product_key) AS total_products
FROM gold.dim_products

SELECT COUNT(DISTINCT product_name) AS total_products
FROM gold.dim_products

-- Find the total number of customers
SELECT COUNT(customer_key) AS total_custoemrs
FROM gold.dim_customers


-- Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) AS total_custoemrs
FROM gold.fact_sales


-- Generate a Report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales) AS measure_value  FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Average Sales' AS measure_name, AVG(sales) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' AS measure_name, COUNT(product_key) AS measure_value FROM gold.dim_products
UNION ALL 
SELECT 'Total Customers' AS measure_name, COUNT(customer_key) AS measure_value FROM gold.dim_customers
UNION ALL 
SELECT 'Total customers who ordered' AS measure_name, COUNT(DISTINCT customer_key) AS measure_value FROM gold.fact_sales



--== Magnitude ===

-- Find Total Customers by Countries?
SELECT 
Country, 
COUNT(customer_key) AS total_cusotmers 
FROM gold.dim_customers
GROUP BY Country 
ORDER BY total_cusotmers DESC

-- Find total customers by gender?
SELECT 
gender, 
COUNT(customer_key) AS total_cusotmers 
FROM gold.dim_customers
GROUP BY gender 
ORDER BY total_cusotmers DESC


-- Find total Products by category? 
SELECT 
category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC


-- What is the average cost of each category? 
SELECT 
category,
AVG(cost) AS average_cost
FROM gold.dim_products
GROUP BY category
ORDER BY average_cost DESC


-- What is the total revenue generated by each category?
SELECT 
p.category,
SUM(f.sales) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key =f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

-- What is the total revenue by each customer?
SELECT 
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key =c.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

-- What is the distribution of sold items across countries? 
SELECT 
c.Country,
--SUM(f.sales) AS total_revenue,
SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key =c.customer_key
GROUP BY 
c.Country
ORDER BY total_sold_items DESC
--ORDER BY total_revenue DESC



--=== Ranking (Top N - Bottom N) ===


-- Which 5 products generate the highest revenue?
SELECT TOP 5
p.product_name,
SUM(f.sales) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key =f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

-- Which 5 best sub-categories?
SELECT TOP 5
p.sub_category,
SUM(f.sales) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key =f.product_key
GROUP BY p.sub_category
ORDER BY total_revenue DESC


--using ranking
SELECT *
FROM (
	SELECT
	p.product_name,
	SUM(f.sales) AS total_revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales) DESC) AS  rank_products
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key =f.product_key
	GROUP BY p.product_name ) t
WHERE rank_products <= 5


-- Find the top 10 customers who have generated the highest revenue
--using ranking
SELECT *
FROM (
	SELECT
	c.customer_key,
	c.first_name,
	SUM(f.sales) AS total_revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales) DESC) AS  rank_customers
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON c.customer_key =f.customer_key
	GROUP BY c.customer_key, c.first_name ) t
WHERE rank_customers <= 10

-- The 3 customers with the fewest orders placed

SELECT TOP 3
c.customer_key,
c.first_name,
c.last_name,
COUNT( DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_orders


-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
p.product_name,
SUM(f.sales) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key =f.product_key
GROUP BY p.product_name
ORDER BY total_revenue 
